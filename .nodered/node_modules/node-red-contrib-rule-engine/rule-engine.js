// Copyright (c) 2019 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

module.exports = function (RED) {
    "use strict";
    //All isFunctions are called in process_msg during eval, refer ROOT/public/rule-enfine/js/rawData.js
    let isContainsCheck = (a, b) => { return (a + "").indexOf(b) != -1; }
    let isTypeCheck = (a, b) => {
        if (b === "array") { return Array.isArray(a); }
        else if (b === "buffer") { return Buffer.isBuffer(a); }
        else if (b === "json") {
            try { JSON.parse(a); return true; }   // or maybe ??? a !== null; }
            catch (e) { return false; }
        }
        else if (b === "null") { return a === null; }
        else { return typeof a === b && !Array.isArray(a) && !Buffer.isBuffer(a) && a !== null; }
    }
    let isEmptyCheck = (a) => {
        if (typeof a === 'string' || typeof a === 'number' || Array.isArray(a) || Buffer.isBuffer(a)) {
            return a.length === 0;
        }
        else if (typeof a === 'undefined' || a === null) {
            return true;
        } else if (typeof a === 'object' && a !== null) {
            return Object.keys(a).length === 0;
        }
        return false;
    }
    let isNonEmptyCheck = (a) => {
        if (typeof a === 'string' || typeof a === 'number' || Array.isArray(a) || Buffer.isBuffer(a)) {
            return a.length !== 0;
        } else if (typeof a === 'object' && a !== null) {
            return Object.keys(a).length !== 0;
        }
        return false;
    }
    let isRegexCheck = (a, b) => { return (a + "").match(new RegExp(b, false ? 'i' : '')); }
    let isBtwnCheck = (a, b, c) => { return a >= b && a <= c; }
    function RuleEngineNode(n) {
        RED.nodes.createNode(this, n);
        this.rules = n.rules || [];
        this.properties = n.properties;
        this.logicalRules = n.logicalRules;
        this.propertyValues = [];
        var node = this;
        let isJSONdataCheck = (a) => { //used in eval final rule
            try {
                let v = RED.util.prepareJSONataExpression(a, node);
                return v;
            } catch (err) {
                //node.error(RED._("switch.errors.invalid-expr", { error: err.message }));
                return false;
            }
        }
        let re = new RegExp("\\(\\)", "g");//this will replace () to false in logicalRules, to avoide exception during eval
        for (var x = 0; x < node.logicalRules.length; x++) {
            node.logicalRules[x] = node.logicalRules[x].replace(re, false);
        }

        function process_msg(msg) {
            var onward = [];
            for (var i = 0; i < node.properties.length; i++) {
                var prop;
                if (node.properties[i].indexOf("isJSONdataCheck") > -1) {
                    try {
                        let p = eval(node.properties[i]);
                        prop = RED.util.evaluateJSONataExpression(p, msg.payload);
                    } catch (err) {
                        prop = null;
                        //throw new Error(RED._("switch.errors.invalid-expr",{error:err.message})) //keep this for reference
                    }
                } else {
                    try {
                        prop = RED.util.evaluateNodeProperty(node.properties[i], 'msg', node, msg);
                    } catch (e) {
                        prop = null;
                    }
                }
                node.propertyValues[i] = prop;
            }
            try {
                for (var x = 0; x < node.logicalRules.length; x++) {
                    let result = eval(node.logicalRules[x]);
                    if (result) {
                        onward.push(msg);
                    } else {
                        onward.push(null);
                    }
                }
                node.send(onward);
            } catch (err) {
                node.warn(err);
            }
        }
        this.on('input', (msg) => {
            process_msg(msg);
        });
    }
    RED.nodes.registerType("rule-engine", RuleEngineNode);
}